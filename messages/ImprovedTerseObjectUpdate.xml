<?xml version="1.0"?>
<message xmlns="https://leoschwarz.github.io/opensim-protocol/util/MessageSchema.xsd" name="ImprovedTerseObjectUpdate" frequency_class="high" frequency_number="15" trusted="true" compression="unencoded">
    <block name="RegionData" quantity="single">
        <field name="RegionHandle" type="U64">
            <doc>TODO</doc>
        </field>
        <field name="TimeDilation" type="U16">
            <doc>TODO</doc>
        </field>
    </block>
    <block name="ObjectData" quantity="variable">
        <field name="Data" type="Variable 1">
            <doc>
                In sequential fashion the following fields are encoded.

                <![CDATA[
                <table>
                <tr>
                    <th>bytes</th>
                    <th>field</th>
                    <th>type</th>
                    <th>description</th>
                </tr>
                <tr><td>4</td><td>local_id</td><td>u32</td><td>should be the same as `client.local_id`</td></tr>
                <tr><td>1</td><td>state</td><td>u8</td><td>TODO</td></tr>
                <tr><td>1</td><td>collision_exists</td><td>bool</td><td>If 0 the next field is not specified (zero bytes), if 1 read as usual.</td></tr>
                <tr><td>16?</td><td>collision_plane</td><td>Vector4 f32</td><td></td></tr>
                <tr><td>12</td><td>position</td><td>Vector3 f32</td><td></td></tr>
                <tr><td>6</td><td>velocity</td><td>Vector3 u16f [-128;128]</td><td></td></tr>
                <tr><td>6</td><td>acceleration</td><td>Vector3 u16f [-64;64]</td><td></td></tr>
                <tr><td>8</td><td>rotation (theta)</td><td>Quat4 u16f [-1;1]</td><td></td></tr>
                <tr><td>6</td><td>angular vel. (omega)</td><td>Vector3 u16f [-64;64]</td><td></td></tr>
                </table>
                ]]>

                u16f: Means that the data is encoded as u16 (0-255), and is to be mapped
                      into the f32 range specified in square brackets afterwards.
                      Note that here we have to be careful that we set the value to zero,
                      if `abs(fval) &lt; (upper-lower) as f32 / 255`, so exact zeros can
                      be decoded.
            </doc>
        </field>
        <field name="TextureEntry" type="Variable 2">
            <doc>
                If this field's value is even shorter than 16 bytes, the OpenMetaverse code
                did not fail but report an absence of value, so probably we should do
                the same thing. (TODO: Decide on that.)

                A TextureEntry specifies the properties of up to 32 faces.
                Each of the properties is encoded for all specified faces as an array,
                packed according to the following rules, and the arrays follow directly
                after each other.

                These properties are specified (in this order).

                <![CDATA[
                <table>
                <tr>
                    <th>Property</th>
                    <th>Value Type (Bytes)></th>
                    <th>Description</th>
                </tr>
                <tr><td>Texture</td><td>UUID (16)</td><td>The texture ID for this face.</td></tr>
                <tr><td>Color</td><td>Color4 (4)</td><td>RGBA value.</td></tr>
                <tr><td>RepeatU</td><td>f32 (4)</td><td>TODO</td></tr>
                <tr><td>RepeatV</td><td>f32 (4)</td><td>TODO</td></tr>
                <tr><td>OffsetU</td><td>f32 (2) *A</td><td>TODO</td></tr>
                <tr><td>OffsetV</td><td>f32 (2) *A</td><td>TODO</td></tr>
                <tr><td>Rotation</td><td>f32 (2) *B</td><td>TODO</td></tr>
                <tr><td>Material</td><td>u8 (1)</td><td>TODO</td></tr>
                <tr><td>Media</td><td>u8 (1)</td><td>TODO</td></tr>
                <tr><td>Glow</td><td>f32 (1) *C</td><td>TODO</td></tr>
                <tr><td>MaterialID</td><td>UUID (16)</td><td>TODO, note this value can also be missing like texture</td></tr>
                </table>
                ]]>

                f32 encoding:
                ============
                - A: `read_i16::&lt;LE&gt;() / 32767.0f`
                - B: `read_u16::&lt;LE&gt;() / 32768.0f * 2Ï€`
                - C: `read_u8() / 255.0f`

                Array structure:
                ===============
                - encode: default value for faces without an explicitly specified value
                - repeat
                    - encode: faces bit field
                        - if bit is 1 set the face property to the following value otherwise ignore
                        - if the whole bitset is zero, end of array is reached.
                    - encode: value

                Arrays are preceeded with a default value for all unspecified faces,
                and then followed by values for a selection of faces.

                Faces bit field:

                ```text
                +--------+     +--------+--------+
                |1XXXXXXX| ... |1XXXXXXX|0XXXXXXX|
                +--------+     +--------+--------+
                ```
                - The value is obtained by gluing together the X bits in the same order as above,
                  (assuming zero padding on the left side) then interpreting this as a little endian
                  u32 number.
                - Note that there can be even zero bytes with a 1 at the beginning.
                - Bits refer right to left to faces 0, 1, 2, etc.
            </doc>
        </field>
    </block>
    <doc>
        A terse object update is sent, when a transformation matrix, velocity or acceleration of an object changes, but the rest does not change.

    </doc>
    <sources>
        <source>Template File</source>
        <source>OpenMetaverse/ObjectManager.cs</source>
        <source>OpenMetaverse/TextureEntry.cs</source>
    </sources>
</message>
